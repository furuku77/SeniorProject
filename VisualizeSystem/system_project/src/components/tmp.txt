const getOption = () => {

        // const BJData = initialData

        const color = ['#a6c84c', '#a6c84c', '#a6c84c'];
        const series = [];
        [['', BJData, val_node]].forEach(function (item, i) {
            // console.log(item[2])
            series.push({
                name: item[0],
                type: 'lines',
                // zlevel: 1,
                effect: {
                    show: true,
                    period: 6,
                    trailLength: 0.7,
                    color: '#fff',
                    symbolSize: 2.5
                },
                lineStyle: {
                    normal: {
                        color: color[i],
                        width: 0,
                        curveness: 0.2,
                        opacity: 0.7,
                    }
                },


                data: convertData(item[1])
            },
                {
                    name: item[0],
                    type: 'lines',
                    // zlevel: 2,
                    symbol: ['none', 'arrow'],
                    symbolSize: 10,
                    effect: {
                        show: true,
                        period: 6,
                        trailLength: 0,
                        symbol: 'none',
                        symbolSize: 15
                    },
                    lineStyle: {
                        normal: {
                            color: color[i],
                            width: 2.5,
                            opacity: 0.8,
                            curveness: 0.2
                        }
                    },
                    data: convertData(item[1])

                },
                {
                    name: item[0],
                    type: 'effectScatter',
                    coordinateSystem: 'geo',
                    zlevel: 2,
                    rippleEffect: {
                        brushType: 'stroke'
                    },
                    label: {
                        normal: {
                            show: false,
                            position: 'right',
                            // formatter: '{b}'
                        }
                    },
                    symbolSize: function (val) {
                        // console.log(maximum)
                        return (val[2] / 2000);
                    },
                    itemStyle: {
                        normal: {
                            color: color[i]
                        }
                    },

                    data: val_node.map(function (dataItem) {
                        // console.log(dataItem)
                        return {

                            name: dataItem.name,
                            value: geoCoordMap(dataItem.name).concat(dataItem.val[node])
                        };
                    })
                });
        });

        if (globe == 1) {
            const option = {
                backgroundColor: '#000',
                globe: {
                    baseTexture: Base,
                    heightTexture: Highlight,

                    shading: 'lambert',

                    light: {
                        ambient: {
                            intensity: 0.4
                        },
                        main: {
                            intensity: 0.4
                        }
                    },

                    viewControl: {
                        autoRotate: true,
                        // maxBeta : 90,
                        // minAlpha : 90,
                        // autoRotateDirection = cw,
                        longitude: 100.7455978394,
                        latitude: 13.7026996613
                    },

                },
                visualMap: {
                    calculable: true,
                    realtime: false,
                    // show: true,
                    min: 0,
                    max: getMax(initialData),
                    inRange: {
                        opacity: [0.25, 1],
                        width: [1, 5]
                    }
                },

                series: [{

                    type: 'lines3D',

                    coordinateSystem: 'globe',

                    blendMode: 'lighter',

                    lineStyle: {
                        width: 4,
                        color: 'rgb(50, 50, 150)',
                        opacity: 1
                    },


                    data: convertData(initialData)
                },
                {

                    type: 'lines3D',

                    coordinateSystem: 'globe',

                    blendMode: 'lighter',

                    effect: {
                        show: true,
                        trailWidth: 4,
                        trailLength: 0.15,
                        trailOpacity: 1,
                        trailColor: 'rgb(30, 30, 60)'
                    },


                    data: convertData(initialData)
                }, {
                    type: 'bar3D',
                    coordinateSystem: 'globe',
                    barSize: 0.6,
                    minHeight: 0.2,
                    silent: true,
                    itemStyle: {
                        color: 'orange'
                    },
                    data: val_node.map(function (dataItem) {
                        // console.log(dataItem)
                        return {

                            name: dataItem.name,
                            value: geoCoordMap(dataItem.name).concat(dataItem.val[node])
                        };
                    })

                }]

            }
            return option;

        }
        else {
            const option = {
                backgroundColor: '#202020',
                title: {
                    text: 'Connection',
                    subtext: 'DEMO',
                    left: 'center',
                    textStyle: {
                        color: '#fff'
                    }
                },

                legend: {
                    orient: 'vertical',
                    top: 'bottom',
                    left: 'right',
                    // data: ['A', '上海 Top10', '广州 Top10'],
                    textStyA: {
                        color: '#fff'
                    },
                    selectedMode: 'single'
                },
                geo: {
                    map: 'world',
                    label: {
                        emphasis: {
                            show: true
                        }
                    },
                    scaleLimit: {
                        min: 1.05,
                        max: 10
                    },
                    roam: true,
                    // {
                    //     move : false,
                    //     zoom : true
                    // },
                    itemStyle: {
                        normal: {
                            areaColor: 'black',
                            borderColor: '#404a59'
                        },
                        emphasis: {
                            areaColor: '#2a333d'
                        }
                    }
                },
                tooltip:
                {
                    // "trigger": "axis",
                    formatter: function (params, ticket, callback) {
                        // console.log(params)
                        if (params.componentSubType == "effectScatter") {
                            // console.log(params)
                            // console.log(params.name )
                            // console.log(params.value[2])
                            var res = params.name + ' : ' + params.value[2];
                            // console.log(res)
                            // var res = params;
                            setTimeout(function () {
                                callback(ticket, res);
                            }, 100)
                            return 'loading';
                        }
                        else if (params.componentSubType == "lines") {
                            var res = params.data.fromName + ' - ' + params.data.toName + ' : ' + params.data.value;
                            // console.log(res)
                            setTimeout(function () {
                                callback(ticket, res);
                            }, 100)
                            return 'loading';

                        }


                    }
                },
                visualMap: {
                    show: false,
                    calculable: true,
                    min: 0,
                    max: getMax(initialData),
                    inRange: {
                        opacity: [0.1, 1],
                        width: [1, 5]
                    }
                },
                toolbox: {
                    show: true,
                    feature: {
                        // dataView: {title: 'View', show: true},
                        // restore: {},
                        saveAsImage: { title: 'Save', show: true },
                        restore: {},
                    }
                },

                series: series
            };
            return option;

        }




    };